---
description:
globs:
alwaysApply: false
---

I'm building a session replay SDK called **`swing-js`** that should be installable via:

we are using rrweb: https://github.com/rrweb-io/rrweb/blob/master/guide.md
refer to that guide if you require further rrweb knowledge

```bash
npm install swing-js
```

Before you start, study how `humanbehavior-js` works. Install it and look at:

- Its folder structure and what files get added to a Next.js project.
- The way it exports `HumanBehaviorProvider`.
- Its onboarding developer experience (shown below).

We want to **replicate that clean developer flow**, but instead of their internal logic, weâ€™ll use [**@rrweb**](mdc:https:/github.com/rrweb-io/rrweb) to record user sessions.

---

### ðŸ§  Reference: `humanbehavior-js` Setup

#### 1. Install

```bash
npm install humanbehavior-js
```

#### 2. App Router Example (app/layout.tsx)

```tsx
import { HumanBehaviorProvider } from "humanbehavior-js/react";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <HumanBehaviorProvider apiKey="...">{children}</HumanBehaviorProvider>
      </body>
    </html>
  );
}
```

#### 3. Pages Router Example (\_app.tsx)

```tsx
import { HumanBehaviorProvider } from "humanbehavior-js/react";
import type { AppProps } from "next/app";

export default function App({ Component, pageProps }: AppProps) {
  return (
    <HumanBehaviorProvider apiKey="...">
      <Component {...pageProps} />
    </HumanBehaviorProvider>
  );
}
```

**Features of their SDK:**

- Works with both App Router and Pages Router
- Tracks route changes automatically
- Server-side rendering (SSR) compatible

---

### âœ… Build `swing-js` Based on That Model

Build an SDK that:

- Installs via npm as `swing-js`
- Uses [`@rrweb`](mdc:https:/github.com/rrweb-io/rrweb) under the hood to record session replays
- Sends recorded session data to a backend
- Is designed **exclusively for Next.js apps**

---

### ðŸ”§ Requirements

1. **React Provider**

   - Export a `<SwingProvider>` that handles:

     - Initializing `rrweb`
     - Tracking route changes automatically (via `next/router`)
     - Recording and saving replay data

   - Usage should match this:

     ```tsx
     import { SwingProvider } from "swing-js/react";

     <SwingProvider apiKey="..." endpoint="...">
       {children}
     </SwingProvider>;
     ```

2. **Session Upload Logic**

   - Decide how session replays will be sent to the backend (e.g., `sendBeacon`, `fetch`, or upload on `beforeunload`)
   - The upload URL should be passed via a `prop` (`endpoint`)

3. **Next.js Only**

   - You can optimize only for Next.js (SSR safe, `useEffect` guards, dynamic imports for rrweb if needed)
   - No need to support other frameworks

4. **SDK Packaging**

   - Bundle the SDK for npm using `tsup`, `vite`, or `rollup`
   - Export everything cleanly via `swing-js` and `swing-js/react`
   - Include a minimal README with setup steps and usage examples
   - Include types for better DX (`.d.ts` or built-in TypeScript support)

5. **Branding**

   - Name everything with the `Swing` prefix (`SwingProvider`, `useSwing`, etc.)
   - Make sure the SDK feels like a first-class product

---

### âœ… Deliverable

A production-ready `swing-js` SDK that:

- Is installable via `npm install swing-js`
- Provides a `<SwingProvider />` for Next.js apps
- Automatically records sessions using [@rrweb](mdc:https:/github.com/rrweb-io/rrweb)
- Uploads replay data to a configurable endpoint
- Mimics the clean onboarding experience of `humanbehavior-js`

---

Let me know if you'd like to include a test Next.js demo app or CI setup for publishing to npm.
